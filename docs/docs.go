// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2019-04-08 21:02:43.891734 -0300 -03 m=+0.025619197

package docs

import (
	"bytes"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "swagger": "2.0",
    "info": {
        "description": "galaxy offers a drone navigation service (DNS).",
        "title": "galaxy API",
        "termsOfService": "http://example.com/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://example.com/support",
            "email": "support@example.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "host": "localhost:9000",
    "basePath": "/v1",
    "paths": {
        "/": {
            "get": {
                "description": "Healthcheck endpoint",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "galaxy"
                ],
                "summary": "Home",
                "operationId": "home-galaxy",
                "responses": {
                    "200": {
                        "description": "Documentation message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/sectors/{sector_id}/dns": {
            "post": {
                "description": "Get a DNS location of a sector of the galaxy",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "galaxy"
                ],
                "summary": "Show a DNS location",
                "operationId": "dns-sector-galaxy",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Sector ID",
                        "name": "sector_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "x, y, z are the coordinates and vel is the velocity",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/server.DNSRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/server.DNSResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "server.DNSRequest": {
            "type": "object",
            "properties": {
                "vel": {
                    "type": "string",
                    "example": "48.1"
                },
                "x": {
                    "type": "string",
                    "example": "32.1"
                },
                "y": {
                    "type": "string",
                    "example": "4.2"
                },
                "z": {
                    "type": "string",
                    "example": "31.3"
                }
            }
        },
        "server.DNSResponse": {
            "type": "object",
            "properties": {
                "loc": {
                    "type": "number",
                    "example": 27372.229
                }
            }
        },
        "server.ErrorResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "string",
                    "example": "reference not found"
                },
                "message": {
                    "type": "string",
                    "example": "Not Found"
                },
                "status": {
                    "type": "integer",
                    "example": 404
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo swaggerInfo

type s struct{}

func (s *s) ReadDoc() string {
	t, err := template.New("swagger_info").Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, SwaggerInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
